"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createApplicationFiles = void 0;
const schematics_1 = require("@angular-devkit/schematics");
const to_js_1 = require("@nrwl/workspace/src/utils/rules/to-js");
const devkit_1 = require("@nrwl/devkit");
function createApplicationFiles(options) {
    let styleSolutionSpecificAppFiles;
    if (options.styledModule && options.style !== 'styled-jsx') {
        styleSolutionSpecificAppFiles = './files/styled-module';
    }
    else if (options.style === 'styled-jsx') {
        styleSolutionSpecificAppFiles = './files/styled-jsx';
    }
    else if (options.style === 'none') {
        styleSolutionSpecificAppFiles = './files/none';
    }
    else if (options.globalCss) {
        styleSolutionSpecificAppFiles = './files/global-css';
    }
    else {
        styleSolutionSpecificAppFiles = './files/css-module';
    }
    const templateVariables = Object.assign(Object.assign(Object.assign({}, devkit_1.names(options.name)), options), { tmpl: '', offsetFromRoot: devkit_1.offsetFromRoot(options.appProjectRoot) });
    return schematics_1.chain([
        schematics_1.mergeWith(schematics_1.apply(schematics_1.url(`./files/common`), [
            schematics_1.template(templateVariables),
            options.unitTestRunner === 'none'
                ? schematics_1.filter((file) => file !== `/src/app/${options.fileName}.spec.tsx`)
                : schematics_1.noop(),
            schematics_1.move(options.appProjectRoot),
            options.js ? to_js_1.toJS() : schematics_1.noop(),
        ])),
        schematics_1.mergeWith(schematics_1.apply(schematics_1.url(styleSolutionSpecificAppFiles), [
            schematics_1.template(templateVariables),
            schematics_1.move(options.appProjectRoot),
            options.js ? to_js_1.toJS() : schematics_1.noop(),
        ])),
    ]);
}
exports.createApplicationFiles = createApplicationFiles;
//# sourceMappingURL=create-application-files.js.map